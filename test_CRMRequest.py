import unittest
from CRMRequest import CRMRequest


class TestCRMRequest(unittest.TestCase):
    def setUp(self) -> None:
        self.req = CRMRequest()


class TestGetCategories(TestCRMRequest):
    def test_get_categories(self):
        self.assertEqual(self.req.get_categories(),
                         ['Прием врача-стоматолога',
                          'Хирургия',
                          'Имплантация',
                          'Детская стоматология',
                          'Ортодонтия',
                          'Терапия',
                          'Несъемное протезирование',
                          'Съемное протезирование',
                          'Эндодонтия',
                          'Рентгенография'])


class TestGetSerices(TestCRMRequest):
    def test_get_services_all(self):
        self.assertEqual(self.req.get_services(),
                         ['Прием (осмотр, консультация) врача-стоматолога первичный',
                          'Осмотр врача-стоматолога повторный',
                          'Первичный приём главного врача (кандидата медицинских наук)',
                          'Удаление зуба сложное 1 категория', 'Удаление зуба сложное 2 категория',
                          'Удаление зуба сложное 3 категория', 'Удаление зуба сложное 4 категория',
                          'Удаление корней сложное', 'Пластика уздечки нижней/ верхней губы/языка',
                          'Удаление экзостоза', 'Установка ортодонтического миниимплантата',
                          'Лоскутная операция в области одного зуба при имплантации',
                          'Установка Имплантата "Straumann" (Швейцария)', 'Установка имплантата "Dentium" (Корея)',
                          'Открытый синус лифтинг (1/2 челюсти)',
                          'Прием (осмотр, консультация) врача—стоматолога детского первичный',
                          'Запечатывание фиссуры молочного зуба герметиком',
                          'Лечение кариеса постоянного зуба у ребенка',
                          'Лечение кариеса молочного зуба средней степени сложности',
                          'Комплексная гигиена полости рта (детская)', 'Снятие налета пристли',
                          'Лечение пупьпита (2 посещения)', 'Удаление молочного зуба 1 категория',
                          'Удаление молочного зуба 2 категория', 'Удаление молочного зуба 3 категория',
                          'Восстановление коронки зуба Twinky Star',
                          'Восстановление молочного зуба металлической коронкой',
                          'Консультация врача-ортодонта кандидата медицинских наук',
                          'Профилактический прием (осмотр, консультация) врача-ортодонта кандидата мед. наук',
                          'Ортодонтическая коррекция (плановое посещение) I категория сложности',
                          'Ортодонтическая коррекция несъемным ортодонтическим аппаратом', 'Аппарат Хааса',
                          'Лечение поверхностного кариеса', 'Лечение кариеса средней степени сложности',
                          'Лечение глубокого кариеса 1 поверхость', 'Лечение глубокого кариеса 2 поверхности',
                          'Лечение глубокого кариеса 3 и более поверхности',
                          'Реставрация зуба с углубленным подбором цвета', 'Эстетическая реставрация зуба',
                          'Использование штифта стекловолоконного',
                          'Регистрация, первичный осмотр,консультация, составление плана лечения, заполнение истории '
                          'болезни',
                          'Лечение клиновидного дефекта', 'Композитная вкладка, накладка',
                          'Изготовление временной коронки (клиническое)',
                          'Изготовление временной коронки длительного ношения (лабораторная)',
                          'Металлокерамическая коронка', 'Частично/Полный съемный акриловый протез',
                          'Бюгельный протез (кламмерный)', 'Иммедиат протез (временный протез после удаления)',
                          'Первичное эндодонтическое лечение одноканального зуба',
                          'Первичное эндодонтическое лечение двухканального зуба',
                          'Первичное эндодонтическое лечение трехканального зуба',
                          'Первичное эндодонтическое лечение четырехканального зуба',
                          'Предэндодонтическое восстановление (сложное)', 'КТ верхней и нижней челюсти',
                          'КТ одной челюсти']
                         )

    def test_get_services_surgery(self):
        self.assertEqual(self.req.get_services('Хирургия'),
                         ['Удаление зуба сложное 1 категория',
                          'Удаление зуба сложное 2 категория',
                          'Удаление зуба сложное 3 категория',
                          'Удаление зуба сложное 4 категория',
                          'Удаление корней сложное',
                          'Пластика уздечки нижней/ верхней губы/языка',
                          'Удаление экзостоза',
                          'Установка ортодонтического миниимплантата'])


class TestGetEmployees(TestCRMRequest):
    def test_get_employees_all(self):
        self.assertEqual(self.req.get_employees(),
                         ['Магомедов Омаргаджи Ибрагимович',
                          'Гадирова Айнур Захир Кызы',
                          'Шадов Азматгери Жангериевич',
                          'Османова Фарида Ибрагимовна',
                          'Омаров Дадаш Халипаевич',
                          'Абдурахманов Рустам Салимович',
                          'Османов Ильяс Нариманович'])

    @unittest.skip(reason='Error is fixing')
    def test_get_employees_by_(self):
        self.assertEqual(self.req.get_employees('Первичный приём главного врача (кандидата медицинских наук)'),
                         [])


class TestGetDatesTimes(TestCRMRequest):
    def test_get_dates(self):
        self.assertEqual(self.req.get_dates('Османов Ильяс Нариманович'),
                         ['2023-02-17',
                          '2023-02-18',
                          '2023-02-19',
                          '2023-02-21',
                          '2023-03-01',
                          '2023-03-10',
                          '2023-03-11',
                          '2023-03-12',
                          '2023-03-13',
                          '2023-03-14',
                          '2023-03-15',
                          '2023-03-16',
                          '2023-03-17',
                          '2023-03-18',
                          '2023-03-19',
                          '2023-03-21',
                          '2023-03-31',
                          '2023-04-01',
                          '2023-04-10',
                          '2023-04-11',
                          '2023-04-12',
                          '2023-04-13',
                          '2023-04-14',
                          '2023-04-15',
                          '2023-04-16',
                          '2023-04-17',
                          '2023-04-18',
                          '2023-04-19',
                          '2023-04-21',
                          '2023-05-10',
                          '2023-05-21'])

    @unittest.skip(reason='Error is unknown, going to fix!')
    def test_get_times(self):
        dates: list = self.req.get_dates('Османов Ильяс Нариманович')
        self.assertEqual(self.req.get_times(dates[:10], 'Османов Ильяс Нариманович'),
                         [])
